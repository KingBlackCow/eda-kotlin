package com.example.api.domain.postlist

import com.example.api.domain.inspectedPost.InspectedPost
import org.springframework.data.domain.PageRequest
import org.springframework.data.elasticsearch.core.ElasticsearchOperations
import org.springframework.data.elasticsearch.core.query.Criteria
import org.springframework.data.elasticsearch.core.query.CriteriaQuery
import org.springframework.data.elasticsearch.core.query.Query
import org.springframework.stereotype.Component
import java.time.LocalDateTime

@Component
class PostSearchAdapter(
//    private val postSearchRepository: PostSearchRepository,
//    private val elasticsearchOperations: ElasticsearchOperations
) {
    fun indexPost(post: InspectedPost) {
//        postSearchRepository.save(toDocument(post))
    }

    fun deletePost(id: Long?) {
//        postSearchRepository.deleteById(id!!)
    }

    fun searchPostIdsByKeyword(keyword: String?, pageNumber: Int, pageSize: Int): List<Long> {
//        if (keyword == null || keyword.isBlank() || pageNumber < 0 || pageSize < 0) {
//            return listOf()
//        }
//
//        val query = buildQuery(keyword, pageNumber, pageSize)
//        val search = elasticsearchOperations.search(query, PostDocument::class.java)
//
//        return search.searchHits.stream()
//            .map { it.content }
//            .map { it.id }
//            .toList() as List<Long>
        return listOf()
    }

    private fun buildQuery(keyword: String, pageNumber: Int, pageSize: Int): Query {
        val criteria = Criteria("title").matches(keyword)
            .or(Criteria("content")).matches(keyword)
            .or(Criteria("categoryName")).`is`(keyword)
            .or(Criteria("tags")).`is`(keyword)

        return CriteriaQuery(criteria)
            .setPageable(PageRequest.of(pageNumber, pageSize))
    }

    private fun toDocument(inspectedPost: InspectedPost): PostDocument {
        return PostDocument(
            inspectedPost.post.id!!,
            inspectedPost.post.title,
            inspectedPost.post.content,
            inspectedPost.categoryName,
            inspectedPost.autoGeneratedTags,
            LocalDateTime.now()
        )
    }
}