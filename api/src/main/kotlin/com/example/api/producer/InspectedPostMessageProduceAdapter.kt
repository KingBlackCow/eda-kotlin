package com.example.api.producer

import com.example.api.adapter.originalpost.OperationType
import com.example.api.common.Topic.INSPECTED_POST
import com.example.api.domain.inspectedPost.InspectedPost
import com.fasterxml.jackson.core.JsonProcessingException
import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component

@Component
class InspectedPostMessageProduceAdapter(
    private val kafkaTemplate: KafkaTemplate<String, String>,
    private val objectMapper: ObjectMapper
) {
    fun sendCreateMessage(inspectedPost: InspectedPost) {
        val message: InspectedPostMessage = InspectedPostMessage(
            inspectedPost.post.id!!,
            Payload(
                inspectedPost.post,
                inspectedPost.categoryName,
                inspectedPost.autoGeneratedTags,
                inspectedPost.inspectedAt
            ),
            OperationType.CREATE
        )
        this.sendMessage(message)
    }

    fun sendUpdateMessage(inspectedPost: InspectedPost) {
        val message: InspectedPostMessage = InspectedPostMessage(
            inspectedPost.post.id!!,
            Payload(
                inspectedPost.post,
                inspectedPost.categoryName,
                inspectedPost.autoGeneratedTags,
                inspectedPost.inspectedAt
            ),
            OperationType.UPDATE
        )
        this.sendMessage(message)
    }

    fun sendDeleteMessage(postId: Long) {
        val message: InspectedPostMessage = InspectedPostMessage(
            postId,
            null,
            OperationType.DELETE
        )
        this.sendMessage(message)
    }

    private fun sendMessage(message: InspectedPostMessage) {
        try {
            kafkaTemplate.send(INSPECTED_POST, message.id.toString(), objectMapper.writeValueAsString(message))
        } catch (e: JsonProcessingException) {
            throw RuntimeException(e)
        }
    }
}